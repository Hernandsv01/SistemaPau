/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import tools.PopupMessage;
import tools.DBConnection;
import tools.Clase;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import tools.Alumno;

/**
 *
 * @author Edu
 */
public final class CreadorRegistro extends javax.swing.JFrame {
    DefaultTableModel modelPresentes = new DefaultTableModel();
    DefaultTableModel modelAusentes = new DefaultTableModel();

    /**
     * Creates new form CreadorRegistro
     */
    public CreadorRegistro() {
        initComponents();
        initModelPresentes();
        initModelAusentes();
        setBoxClases();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnagregarregistro = new javax.swing.JButton();
        txtid = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablapresentes = new javax.swing.JTable();
        txtfecha = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        boxclase = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaausentes = new javax.swing.JTable();
        btnagregar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnagregarregistro.setText("Agregar");
        btnagregarregistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnagregarregistroActionPerformed(evt);
            }
        });

        txtid.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        tablapresentes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tablapresentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Presentes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablapresentes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablapresentesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablapresentes);

        txtfecha.setToolTipText("aaaa/mm/dd");

        jLabel13.setText("Fecha");

        jLabel22.setText("ID");

        jLabel23.setText("Clase");

        boxclase.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una clase" }));

        tablaausentes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tablaausentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ausentes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaausentes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaausentesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaausentes);

        btnagregar.setText("Agregar Alumnos");
        btnagregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnagregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnagregarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(txtid))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(boxclase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnagregar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(txtfecha)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxclase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnagregar)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(btnagregarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnagregarregistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnagregarregistroActionPerformed
        //Save the info
        String ID = txtid.getText();
        String fecha = txtfecha.getText();
        String infoClase = boxclase.getSelectedItem().toString();
        String id_clase = Clase.generateClassIDFromDisplay(infoClase);
        List<String> presentes = new ArrayList();
        if(tablapresentes.getRowCount() != 0){
            for(int i = 0; i < tablapresentes.getRowCount(); i++){
                presentes.add(tablapresentes.getValueAt(i, 0).toString());
            }
        }
        List<String> ausentes = new ArrayList();
        if(tablaausentes.getRowCount() != 0){
            for(int i = 0; i < tablaausentes.getRowCount(); i++){
                ausentes.add(tablaausentes.getValueAt(i, 0).toString());
            }
        }
        String statement0 = "SELECT COUNT(*) FROM `clasesalumnos` WHERE `id_clase` = '" + id_clase + "'";
        List<String[]> numeroAlumnos = DBConnection.getInstance().selectStatement(statement0, 1);
        
        //Check if the mandatory values are filled
        if(txtid.getText() == null || txtfecha.getText() == null || "Seleccione una clase".equals(boxclase.getSelectedItem().toString())){
                new PopupMessage("Error", Color.RED).setVisible(true);
            return;
        }
        
        //Check if class with same id exists
        String statement1 = "SELECT * FROM `registroclases` WHERE `ID` = '" + ID + "'";
        if(!DBConnection.getInstance().selectStatement(statement1, 4).isEmpty()){
            return;
        }
        
        //Add the class to the register
        String statement2 = "INSERT INTO `registroclases` VALUES ('" + ID + "', '" + fecha + "', '" + id_clase + "', '" + numeroAlumnos.get(0)[0] + "')";
        if(!DBConnection.getInstance().modificationStatement(statement2)){
            new PopupMessage("Error", Color.RED).setVisible(true);
            return;
        }
        
        //Check if any alumno - RECUPERA presente
        for(int i = 0; i < presentes.size(); i++){
            String[] doselementos = presentes.get(i).split(" - ");
            if(doselementos.length != 1){
                String DNI = Alumno.getDNIFromName(doselementos[0]);
                String statement3 = "DELETE FROM `clasesalumnos` WHERE `dni_alumno` = '" + DNI + "' AND `id_clase` = '" + id_clase + "'";
                DBConnection.getInstance().modificationStatement(statement3);
                String statement4 = "UPDATE `ausencias` SET `Fecha_recuperacion` = '" + fecha + "', `recuperada` = 1 WHERE `id_alumno` = '" + DNI + "' AND `id_claserecupera` = '" + id_clase + "' AND `recuperada` IS null";
                DBConnection.getInstance().modificationStatement(statement4);
            }
        }
        
        //Add presentes
        for(int i = 0; i < presentes.size(); i++){
            String[] doselementos = presentes.get(i).split(" - ");
            String DNI = Alumno.getDNIFromName(doselementos[0]);
            if(doselementos.length != 1){
                String statement4 = "INSERT INTO `registropresentes` VALUES ('" + ID + "', '" + DNI + "', '1')";
                DBConnection.getInstance().modificationStatement(statement4);
            }else{
                String statement4 = "INSERT INTO `registropresentes` VALUES ('" + ID + "', '" + DNI + "', '0')";
                DBConnection.getInstance().modificationStatement(statement4);
            }
        }
        
        //Add ausentes
        for(int i = 0; i < ausentes.size(); i++){
            String[] doselementos = ausentes.get(i).split(" - ");
            String DNI = Alumno.getDNIFromName(doselementos[0]);
            if(doselementos.length == 1){
                String statement6 = "INSERT INTO `ausencias` VALUES ('" + ID + "', '" + DNI + "', null, null, null)";
                if(!DBConnection.getInstance().modificationStatement(statement6)){
                    new PopupMessage("Error", Color.RED).setVisible(true);
                }
            }else{
                String statement6 = "INSERT INTO `ausencias` VALUES ('" + ID + "', '" + DNI + "', '" + id_clase + "', null, 0)";
                if(!DBConnection.getInstance().modificationStatement(statement6)){
                    new PopupMessage("Error", Color.RED).setVisible(true);
                }
            }
            String statement = "INSERT INTO `razonesausencias` VALUES ('" + DNI + "', '" + ID + "', null)";
            DBConnection.getInstance().modificationStatement(statement);
            
        }
        
        new PopupMessage("Registro creado con éxito", Color.GREEN).setVisible(true);
        dispose();
    }//GEN-LAST:event_btnagregarregistroActionPerformed

    private void tablapresentesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablapresentesMouseClicked
        String[] alumno = {tablapresentes.getValueAt(tablapresentes.getSelectedRow(), 0).toString()};
        modelPresentes.removeRow(tablapresentes.getSelectedRow());
        modelAusentes.addRow(alumno);
    }//GEN-LAST:event_tablapresentesMouseClicked

    private void tablaausentesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaausentesMouseClicked
        String[] alumno = {tablaausentes.getValueAt(tablaausentes.getSelectedRow(), 0).toString()};
        modelAusentes.removeRow(tablaausentes.getSelectedRow());
        modelPresentes.addRow(alumno);
    }//GEN-LAST:event_tablaausentesMouseClicked

    private void btnagregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnagregarActionPerformed
        int elitotal1 = tablapresentes.getRowCount();
        int elitotal2 = tablaausentes.getRowCount();
        for(int i = elitotal1-1; i>=0; i--){
            modelPresentes.removeRow(i);
        }
        for(int i = elitotal2-1; i>=0; i--){
            modelAusentes.removeRow(i);
        }
        
        if("Seleccione una clase".equals(boxclase.getSelectedItem().toString())){
            new PopupMessage("Error", Color.RED).setVisible(true);
            return;
        }
        
        String infoClase = boxclase.getSelectedItem().toString();
        String[] dia_hora = infoClase.split(" - ");
        String[] hora_mins = dia_hora[1].split(":");
        String id_clase = Clase.generateClassID(dia_hora[0], hora_mins[0], hora_mins[1]);
        
        String statement = "SELECT * FROM `clasesalumnos` WHERE `id_clase` = '" + id_clase + "'";
        List<String[]> listDNI = DBConnection.getInstance().selectStatement(statement, 3);
        if(!listDNI.isEmpty()){
            for(int i = 0; i < listDNI.size(); i++){
                String statement2 = "SELECT * FROM `alumnos` WHERE `DNI` = '" + listDNI.get(i)[0] + "'";
                List<String[]> alumnos = DBConnection.getInstance().selectStatement(statement2, 7);
                for(int x = 0; x < alumnos.size(); x++){
                    String[] str = {alumnos.get(x)[1]};
                    if("1".equals(listDNI.get(i)[2])){
                        str[0] += " - RECUPERA";
                    }
                    modelPresentes.addRow(str);
                }
            }
        }
    }//GEN-LAST:event_btnagregarActionPerformed

    /**
     * @param args the command line arguments
     */
    @SuppressWarnings("Convert2Lambda")
    public static void main2(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreadorRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new CreadorRegistro().setVisible(true);
            }
        });
    }
    
    public void setBoxClases(){
        String statement = "SELECT * FROM `clasesemanal`";
        List<String[]> list = DBConnection.getInstance().selectStatement(statement, 5);
        
        DefaultComboBoxModel boxclasemodel = new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una clase" });
        boxclase.setModel(boxclasemodel);
        String itembox;
        
        for(int i = 0; i < list.size(); i++){
            String[] str = list.get(i);
            str[1] = Clase.setClassValue(str[1]);
            itembox = str[1] + " - " + str[2];
            if(boxclasemodel.getIndexOf(itembox) == -1){
                boxclase.addItem(itembox);
            }
        }
    }
    
    public void initModelPresentes(){
        modelPresentes.addColumn("Presentes");
        tablapresentes.setModel(modelPresentes);
    }
    public void initModelAusentes(){
        modelAusentes.addColumn("Ausentes");
        tablaausentes.setModel(modelAusentes);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxclase;
    private javax.swing.JButton btnagregar;
    private javax.swing.JButton btnagregarregistro;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tablaausentes;
    private javax.swing.JTable tablapresentes;
    private javax.swing.JTextField txtfecha;
    private javax.swing.JTextField txtid;
    // End of variables declaration//GEN-END:variables
}
